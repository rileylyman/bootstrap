
let MessagePacket: struct:
  id: u32
  data: [256: u8]

let Message: struct:
  id: u32
  from: [*: u8]
  
  cases:
    hello:
      #empty
    data_req:
      addr: u32
      n_bytes: u32

impl Message:
  make_data_req: (req: [*: u8]) -> Self:
    let self := Self.data_req._
    self.addr = req.ptr
    self.n_bytes = req.count
    self

  fulfill_data_req: (self: *Self) -> [*: u8]:
    
    

let bar: () -> void:
  let msg :=
    let msg: Message = _
    msg.id = 123
    msg.from = "some_addr"
    msg

  

let main: () -> void:
  let a: i32 = 1
  a = 2

  let a_ptr := a.&

  let a_arr: [4: i32] = [1, 2, 3, 4]

  let a_slice: [*: i32] = a_arr[1:2]

  let compound: [_: u8] =
    let s: [_: u8] = "hello"
    print("forming s")
    s

  print("Hello, world!")

  let b := foo()


let foo: () -> i32:
  print("inside foo")
  return 55
